/* auto-generated by genmsg_cpp from /home/davidmandle/rospackages/cart_interp/msg/CartesianArmActionAction.msg.  Do not edit! */
#ifndef CART_INTERP_CARTESIANARMACTIONACTION_H
#define CART_INTERP_CARTESIANARMACTIONACTION_H

#include <string>
#include <vector>
#include "ros/message.h"
#include "ros/debug.h"
#include "ros/assert.h"
#include "ros/time.h"

#include "roslib/Header.h"
#include "actionlib_msgs/GoalID.h"
#include "geometry_msgs/Point.h"
#include "geometry_msgs/Quaternion.h"
#include "geometry_msgs/Pose.h"
#include "geometry_msgs/PoseStamped.h"
#include "cart_interp/CartesianArmActionGoal.h"
#include "cart_interp/CartesianArmActionActionGoal.h"
#include "actionlib_msgs/GoalStatus.h"
#include "cart_interp/CartesianArmActionResult.h"
#include "cart_interp/CartesianArmActionActionResult.h"
#include "cart_interp/CartesianArmActionFeedback.h"
#include "cart_interp/CartesianArmActionActionFeedback.h"

namespace cart_interp
{

//! \htmlinclude CartesianArmActionAction.msg.html

class CartesianArmActionAction : public ros::Message
{
public:
  typedef boost::shared_ptr<CartesianArmActionAction> Ptr;
  typedef boost::shared_ptr<CartesianArmActionAction const> ConstPtr;

  typedef cart_interp::CartesianArmActionActionGoal _action_goal_type;
  typedef cart_interp::CartesianArmActionActionResult _action_result_type;
  typedef cart_interp::CartesianArmActionActionFeedback _action_feedback_type;

  cart_interp::CartesianArmActionActionGoal action_goal;
  cart_interp::CartesianArmActionActionResult action_result;
  cart_interp::CartesianArmActionActionFeedback action_feedback;

  CartesianArmActionAction() : ros::Message()
  {
  }
  CartesianArmActionAction(const CartesianArmActionAction &copy) : ros::Message(),
    action_goal(copy.action_goal),
    action_result(copy.action_result),
    action_feedback(copy.action_feedback)
  {
    (void)copy;
  }
  CartesianArmActionAction &operator =(const CartesianArmActionAction &copy)
  {
    if (this == &copy)
      return *this;
    action_goal = copy.action_goal;
    action_result = copy.action_result;
    action_feedback = copy.action_feedback;
    return *this;
  }
  virtual ~CartesianArmActionAction() 
  {
  }
  inline static std::string __s_getDataType() { return std::string("cart_interp/CartesianArmActionAction"); }
  inline static std::string __s_getMD5Sum() { return std::string("2d3a4cf7ed28dced258dbaa367b564b6"); }
  inline static std::string __s_getMessageDefinition()
  {
    return std::string(
    "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
    "\n"
    "CartesianArmActionActionGoal action_goal\n"
    "CartesianArmActionActionResult action_result\n"
    "CartesianArmActionActionFeedback action_feedback\n"
    "\n"
    "================================================================================\n"
    "MSG: cart_interp/CartesianArmActionActionGoal\n"
    "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
    "\n"
    "Header header\n"
    "actionlib_msgs/GoalID goal_id\n"
    "CartesianArmActionGoal goal\n"
    "\n"
    "================================================================================\n"
    "MSG: roslib/Header\n"
    "# Standard metadata for higher-level stamped data types.\n"
    "# This is generally used to communicate timestamped data \n"
    "# in a particular coordinate frame.\n"
    "# \n"
    "# sequence ID: consecutively increasing ID \n"
    "uint32 seq\n"
    "#Two-integer timestamp that is expressed as:\n"
    "# * stamp.secs: seconds (stamp_secs) since epoch\n"
    "# * stamp.nsecs: nanoseconds since stamp_secs\n"
    "# time-handling sugar is provided by the client library\n"
    "time stamp\n"
    "#Frame this data is associated with\n"
    "# 0: no frame\n"
    "# 1: global frame\n"
    "string frame_id\n"
    "\n"
    "================================================================================\n"
    "MSG: actionlib_msgs/GoalID\n"
    "# The stamp should store the time at which this goal was requested.\n"
    "# It is used by an action server when it tries to preempt all\n"
    "# goals that were requested before a certain time\n"
    "time stamp\n"
    "\n"
    "# The id provides a way to associate feedback and\n"
    "# result message with specific goal requests. The id\n"
    "# specified must be unique.\n"
    "string id\n"
    "\n"
    "\n"
    "================================================================================\n"
    "MSG: cart_interp/CartesianArmActionGoal\n"
    "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
    "# goal definition\n"
    "geometry_msgs/PoseStamped setpoint\n"
    "\n"
    "================================================================================\n"
    "MSG: geometry_msgs/PoseStamped\n"
    "# A Pose with reference coordinate frame and timestamp\n"
    "Header header\n"
    "Pose pose\n"
    "\n"
    "================================================================================\n"
    "MSG: geometry_msgs/Pose\n"
    "# A representation of pose in free space, composed of postion and orientation. \n"
    "Point position\n"
    "Quaternion orientation\n"
    "\n"
    "================================================================================\n"
    "MSG: geometry_msgs/Point\n"
    "# This contains the position of a point in free space\n"
    "float64 x\n"
    "float64 y\n"
    "float64 z\n"
    "\n"
    "================================================================================\n"
    "MSG: geometry_msgs/Quaternion\n"
    "# This represents an orientation in free space in quaternion form.\n"
    "\n"
    "float64 x\n"
    "float64 y\n"
    "float64 z\n"
    "float64 w\n"
    "\n"
    "================================================================================\n"
    "MSG: cart_interp/CartesianArmActionActionResult\n"
    "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
    "\n"
    "Header header\n"
    "actionlib_msgs/GoalStatus status\n"
    "CartesianArmActionResult result\n"
    "\n"
    "================================================================================\n"
    "MSG: actionlib_msgs/GoalStatus\n"
    "GoalID goal_id\n"
    "uint8 status\n"
    "uint8 PENDING         = 0   # The goal has yet to be processed by the action server\n"
    "uint8 ACTIVE          = 1   # The goal is currently being processed by the action server\n"
    "uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n"
    "                            #   and has since completed its execution (Terminal State)\n"
    "uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\n"
    "uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n"
    "                            #    to some failure (Terminal State)\n"
    "uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n"
    "                            #    because the goal was unattainable or invalid (Terminal State)\n"
    "uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n"
    "                            #    and has not yet completed execution\n"
    "uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n"
    "                            #    but the action server has not yet confirmed that the goal is canceled\n"
    "uint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n"
    "                            #    and was successfully cancelled (Terminal State)\n"
    "uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n"
    "                            #    sent over the wire by an action server\n"
    "\n"
    "#Allow for the user to associate a string with GoalStatus for debugging\n"
    "string text\n"
    "\n"
    "\n"
    "================================================================================\n"
    "MSG: cart_interp/CartesianArmActionResult\n"
    "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
    "# result definition\n"
    "geometry_msgs/Pose endpoint\n"
    "\n"
    "================================================================================\n"
    "MSG: cart_interp/CartesianArmActionActionFeedback\n"
    "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
    "\n"
    "Header header\n"
    "actionlib_msgs/GoalStatus status\n"
    "CartesianArmActionFeedback feedback\n"
    "\n"
    "================================================================================\n"
    "MSG: cart_interp/CartesianArmActionFeedback\n"
    "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
    "# feedback definition\n"
    "geometry_msgs/Pose currentpoint\n"
    "\n"
    "\n"
    );
  }
  inline virtual const std::string __getDataType() const { return __s_getDataType(); }
  inline virtual const std::string __getMD5Sum() const { return __s_getMD5Sum(); }
  inline virtual const std::string __getMessageDefinition() const { return __s_getMessageDefinition(); }
  inline uint32_t serializationLength() const
  {
    unsigned __l = 0;
    __l += action_goal.serializationLength(); // action_goal
    __l += action_result.serializationLength(); // action_result
    __l += action_feedback.serializationLength(); // action_feedback
    return __l;
  }
  virtual uint8_t *serialize(uint8_t *write_ptr,
#if defined(__GNUC__)
                             __attribute__((unused)) uint32_t seq) const
#else
                             uint32_t seq) const
#endif
  {
    write_ptr = action_goal.serialize(write_ptr, seq);
    write_ptr = action_result.serialize(write_ptr, seq);
    write_ptr = action_feedback.serialize(write_ptr, seq);
    return write_ptr;
  }
  virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    read_ptr = action_goal.deserialize(read_ptr);
    read_ptr = action_result.deserialize(read_ptr);
    read_ptr = action_feedback.deserialize(read_ptr);
    return read_ptr;
  }
};

typedef boost::shared_ptr<CartesianArmActionAction> CartesianArmActionActionPtr;
typedef boost::shared_ptr<CartesianArmActionAction const> CartesianArmActionActionConstPtr;


}

#endif
