# autogenerated by genmsg_py from ChessbotAction.msg. Do not edit.
import roslib.message
import struct

import roslib.msg
import roslib.rostime
import chessbot.msg
import actionlib_msgs.msg

class ChessbotAction(roslib.message.Message):
  _md5sum = "6d13f6edd92757238ecf501b99d7cc86"
  _type = "chessbot/ChessbotAction"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

ChessbotActionGoal action_goal
ChessbotActionResult action_result
ChessbotActionFeedback action_feedback

================================================================================
MSG: chessbot/ChessbotActionGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
ChessbotGoal goal

================================================================================
MSG: roslib/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: chessbot/ChessbotGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal definition
int8 origin_row
int8 origin_col
int8 destination_row
int8 destination_col
bool capture


================================================================================
MSG: chessbot/ChessbotActionResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
ChessbotResult result

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: chessbot/ChessbotResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#result definition

================================================================================
MSG: chessbot/ChessbotActionFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
ChessbotFeedback feedback

================================================================================
MSG: chessbot/ChessbotFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#feedback definition

"""
  __slots__ = ['action_goal','action_result','action_feedback']
  _slot_types = ['chessbot/ChessbotActionGoal','chessbot/ChessbotActionResult','chessbot/ChessbotActionFeedback']

  ## Constructor. Any message fields that are implicitly/explicitly
  ## set to None will be assigned a default value. The recommend
  ## use is keyword arguments as this is more robust to future message
  ## changes.  You cannot mix in-order arguments and keyword arguments.
  ##
  ## The available fields are:
  ##   action_goal,action_result,action_feedback
  ##
  ## @param self: self
  ## @param args: complete set of field values, in .msg order
  ## @param kwds: use keyword arguments corresponding to message field names
  ## to set specific fields. 
  def __init__(self, *args, **kwds):
    if args or kwds:
      super(ChessbotAction, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.action_goal is None:
        self.action_goal = chessbot.msg.ChessbotActionGoal()
      if self.action_result is None:
        self.action_result = chessbot.msg.ChessbotActionResult()
      if self.action_feedback is None:
        self.action_feedback = chessbot.msg.ChessbotActionFeedback()
    else:
      self.action_goal = chessbot.msg.ChessbotActionGoal()
      self.action_result = chessbot.msg.ChessbotActionResult()
      self.action_feedback = chessbot.msg.ChessbotActionFeedback()

  ## internal API method
  def _get_types(self): return self._slot_types

  ## serialize message into buffer
  ## @param buff StringIO: buffer
  def serialize(self, buff):
    try:
      buff.write(struct.pack('<3I', self.action_goal.header.seq, self.action_goal.header.stamp.secs, self.action_goal.header.stamp.nsecs))
      length = len(self.action_goal.header.frame_id)
      #serialize self.action_goal.header.frame_id
      buff.write(struct.pack('<I%ss'%length, length, self.action_goal.header.frame_id))
      buff.write(struct.pack('<2I', self.action_goal.goal_id.stamp.secs, self.action_goal.goal_id.stamp.nsecs))
      length = len(self.action_goal.goal_id.id)
      #serialize self.action_goal.goal_id.id
      buff.write(struct.pack('<I%ss'%length, length, self.action_goal.goal_id.id))
      buff.write(struct.pack('<4bB3I', self.action_goal.goal.origin_row, self.action_goal.goal.origin_col, self.action_goal.goal.destination_row, self.action_goal.goal.destination_col, self.action_goal.goal.capture, self.action_result.header.seq, self.action_result.header.stamp.secs, self.action_result.header.stamp.nsecs))
      length = len(self.action_result.header.frame_id)
      #serialize self.action_result.header.frame_id
      buff.write(struct.pack('<I%ss'%length, length, self.action_result.header.frame_id))
      buff.write(struct.pack('<2I', self.action_result.status.goal_id.stamp.secs, self.action_result.status.goal_id.stamp.nsecs))
      length = len(self.action_result.status.goal_id.id)
      #serialize self.action_result.status.goal_id.id
      buff.write(struct.pack('<I%ss'%length, length, self.action_result.status.goal_id.id))
      buff.write(struct.pack('<B', self.action_result.status.status))
      length = len(self.action_result.status.text)
      #serialize self.action_result.status.text
      buff.write(struct.pack('<I%ss'%length, length, self.action_result.status.text))
      buff.write(struct.pack('<3I', self.action_feedback.header.seq, self.action_feedback.header.stamp.secs, self.action_feedback.header.stamp.nsecs))
      length = len(self.action_feedback.header.frame_id)
      #serialize self.action_feedback.header.frame_id
      buff.write(struct.pack('<I%ss'%length, length, self.action_feedback.header.frame_id))
      buff.write(struct.pack('<2I', self.action_feedback.status.goal_id.stamp.secs, self.action_feedback.status.goal_id.stamp.nsecs))
      length = len(self.action_feedback.status.goal_id.id)
      #serialize self.action_feedback.status.goal_id.id
      buff.write(struct.pack('<I%ss'%length, length, self.action_feedback.status.goal_id.id))
      buff.write(struct.pack('<B', self.action_feedback.status.status))
      length = len(self.action_feedback.status.text)
      #serialize self.action_feedback.status.text
      buff.write(struct.pack('<I%ss'%length, length, self.action_feedback.status.text))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance
  ## @param self: self
  ## @param str str: byte array of serialized message
  def deserialize(self, str):
    try:
      if self.action_goal is None:
        self.action_goal = chessbot.msg.ChessbotActionGoal()
      if self.action_result is None:
        self.action_result = chessbot.msg.ChessbotActionResult()
      if self.action_feedback is None:
        self.action_feedback = chessbot.msg.ChessbotActionFeedback()
      end = 0
      start = end
      end += 12
      (self.action_goal.header.seq, self.action_goal.header.stamp.secs, self.action_goal.header.stamp.nsecs,) = struct.unpack('<3I',str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.action_goal.header.frame_id
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.action_goal.header.frame_id,) = struct.unpack(pattern, str[start:end])
      start = end
      end += 8
      (self.action_goal.goal_id.stamp.secs, self.action_goal.goal_id.stamp.nsecs,) = struct.unpack('<2I',str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.action_goal.goal_id.id
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.action_goal.goal_id.id,) = struct.unpack(pattern, str[start:end])
      start = end
      end += 17
      (self.action_goal.goal.origin_row, self.action_goal.goal.origin_col, self.action_goal.goal.destination_row, self.action_goal.goal.destination_col, self.action_goal.goal.capture, self.action_result.header.seq, self.action_result.header.stamp.secs, self.action_result.header.stamp.nsecs,) = struct.unpack('<4bB3I',str[start:end])
      self.action_goal.goal.capture = bool(self.action_goal.goal.capture)
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.action_result.header.frame_id
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.action_result.header.frame_id,) = struct.unpack(pattern, str[start:end])
      start = end
      end += 8
      (self.action_result.status.goal_id.stamp.secs, self.action_result.status.goal_id.stamp.nsecs,) = struct.unpack('<2I',str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.action_result.status.goal_id.id
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.action_result.status.goal_id.id,) = struct.unpack(pattern, str[start:end])
      start = end
      end += 1
      (self.action_result.status.status,) = struct.unpack('<B',str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.action_result.status.text
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.action_result.status.text,) = struct.unpack(pattern, str[start:end])
      start = end
      end += 12
      (self.action_feedback.header.seq, self.action_feedback.header.stamp.secs, self.action_feedback.header.stamp.nsecs,) = struct.unpack('<3I',str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.action_feedback.header.frame_id
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.action_feedback.header.frame_id,) = struct.unpack(pattern, str[start:end])
      start = end
      end += 8
      (self.action_feedback.status.goal_id.stamp.secs, self.action_feedback.status.goal_id.stamp.nsecs,) = struct.unpack('<2I',str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.action_feedback.status.goal_id.id
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.action_feedback.status.goal_id.id,) = struct.unpack(pattern, str[start:end])
      start = end
      end += 1
      (self.action_feedback.status.status,) = struct.unpack('<B',str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.action_feedback.status.text
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.action_feedback.status.text,) = struct.unpack(pattern, str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  ## serialize message with numpy array types into buffer
  ## @param self: self
  ## @param buff StringIO: buffer
  ## @param numpy module: numpy python module
  def serialize_numpy(self, buff, numpy):
    try:
      buff.write(struct.pack('<3I', self.action_goal.header.seq, self.action_goal.header.stamp.secs, self.action_goal.header.stamp.nsecs))
      length = len(self.action_goal.header.frame_id)
      #serialize self.action_goal.header.frame_id
      buff.write(struct.pack('<I%ss'%length, length, self.action_goal.header.frame_id))
      buff.write(struct.pack('<2I', self.action_goal.goal_id.stamp.secs, self.action_goal.goal_id.stamp.nsecs))
      length = len(self.action_goal.goal_id.id)
      #serialize self.action_goal.goal_id.id
      buff.write(struct.pack('<I%ss'%length, length, self.action_goal.goal_id.id))
      buff.write(struct.pack('<4bB3I', self.action_goal.goal.origin_row, self.action_goal.goal.origin_col, self.action_goal.goal.destination_row, self.action_goal.goal.destination_col, self.action_goal.goal.capture, self.action_result.header.seq, self.action_result.header.stamp.secs, self.action_result.header.stamp.nsecs))
      length = len(self.action_result.header.frame_id)
      #serialize self.action_result.header.frame_id
      buff.write(struct.pack('<I%ss'%length, length, self.action_result.header.frame_id))
      buff.write(struct.pack('<2I', self.action_result.status.goal_id.stamp.secs, self.action_result.status.goal_id.stamp.nsecs))
      length = len(self.action_result.status.goal_id.id)
      #serialize self.action_result.status.goal_id.id
      buff.write(struct.pack('<I%ss'%length, length, self.action_result.status.goal_id.id))
      buff.write(struct.pack('<B', self.action_result.status.status))
      length = len(self.action_result.status.text)
      #serialize self.action_result.status.text
      buff.write(struct.pack('<I%ss'%length, length, self.action_result.status.text))
      buff.write(struct.pack('<3I', self.action_feedback.header.seq, self.action_feedback.header.stamp.secs, self.action_feedback.header.stamp.nsecs))
      length = len(self.action_feedback.header.frame_id)
      #serialize self.action_feedback.header.frame_id
      buff.write(struct.pack('<I%ss'%length, length, self.action_feedback.header.frame_id))
      buff.write(struct.pack('<2I', self.action_feedback.status.goal_id.stamp.secs, self.action_feedback.status.goal_id.stamp.nsecs))
      length = len(self.action_feedback.status.goal_id.id)
      #serialize self.action_feedback.status.goal_id.id
      buff.write(struct.pack('<I%ss'%length, length, self.action_feedback.status.goal_id.id))
      buff.write(struct.pack('<B', self.action_feedback.status.status))
      length = len(self.action_feedback.status.text)
      #serialize self.action_feedback.status.text
      buff.write(struct.pack('<I%ss'%length, length, self.action_feedback.status.text))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance using numpy for array types
  ## @param self: self
  ## @param str str: byte array of serialized message
  ## @param numpy module: numpy python module
  def deserialize_numpy(self, str, numpy):
    try:
      if self.action_goal is None:
        self.action_goal = chessbot.msg.ChessbotActionGoal()
      if self.action_result is None:
        self.action_result = chessbot.msg.ChessbotActionResult()
      if self.action_feedback is None:
        self.action_feedback = chessbot.msg.ChessbotActionFeedback()
      end = 0
      start = end
      end += 12
      (self.action_goal.header.seq, self.action_goal.header.stamp.secs, self.action_goal.header.stamp.nsecs,) = struct.unpack('<3I',str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.action_goal.header.frame_id
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.action_goal.header.frame_id,) = struct.unpack(pattern, str[start:end])
      start = end
      end += 8
      (self.action_goal.goal_id.stamp.secs, self.action_goal.goal_id.stamp.nsecs,) = struct.unpack('<2I',str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.action_goal.goal_id.id
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.action_goal.goal_id.id,) = struct.unpack(pattern, str[start:end])
      start = end
      end += 17
      (self.action_goal.goal.origin_row, self.action_goal.goal.origin_col, self.action_goal.goal.destination_row, self.action_goal.goal.destination_col, self.action_goal.goal.capture, self.action_result.header.seq, self.action_result.header.stamp.secs, self.action_result.header.stamp.nsecs,) = struct.unpack('<4bB3I',str[start:end])
      self.action_goal.goal.capture = bool(self.action_goal.goal.capture)
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.action_result.header.frame_id
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.action_result.header.frame_id,) = struct.unpack(pattern, str[start:end])
      start = end
      end += 8
      (self.action_result.status.goal_id.stamp.secs, self.action_result.status.goal_id.stamp.nsecs,) = struct.unpack('<2I',str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.action_result.status.goal_id.id
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.action_result.status.goal_id.id,) = struct.unpack(pattern, str[start:end])
      start = end
      end += 1
      (self.action_result.status.status,) = struct.unpack('<B',str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.action_result.status.text
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.action_result.status.text,) = struct.unpack(pattern, str[start:end])
      start = end
      end += 12
      (self.action_feedback.header.seq, self.action_feedback.header.stamp.secs, self.action_feedback.header.stamp.nsecs,) = struct.unpack('<3I',str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.action_feedback.header.frame_id
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.action_feedback.header.frame_id,) = struct.unpack(pattern, str[start:end])
      start = end
      end += 8
      (self.action_feedback.status.goal_id.stamp.secs, self.action_feedback.status.goal_id.stamp.nsecs,) = struct.unpack('<2I',str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.action_feedback.status.goal_id.id
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.action_feedback.status.goal_id.id,) = struct.unpack(pattern, str[start:end])
      start = end
      end += 1
      (self.action_feedback.status.status,) = struct.unpack('<B',str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.action_feedback.status.text
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.action_feedback.status.text,) = struct.unpack(pattern, str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

