/* auto-generated by genmsg_cpp from /home/davidmandle/rospackages/chessbot/msg/ChessbotAction.msg.  Do not edit! */
#ifndef CHESSBOT_CHESSBOTACTION_H
#define CHESSBOT_CHESSBOTACTION_H

#include <string>
#include <vector>
#include "ros/message.h"
#include "ros/debug.h"
#include "ros/assert.h"
#include "ros/time.h"

#include "roslib/Header.h"
#include "actionlib_msgs/GoalID.h"
#include "chessbot/ChessbotGoal.h"
#include "chessbot/ChessbotActionGoal.h"
#include "actionlib_msgs/GoalStatus.h"
#include "chessbot/ChessbotResult.h"
#include "chessbot/ChessbotActionResult.h"
#include "chessbot/ChessbotFeedback.h"
#include "chessbot/ChessbotActionFeedback.h"

namespace chessbot
{

//! \htmlinclude ChessbotAction.msg.html

class ChessbotAction : public ros::Message
{
public:
  typedef boost::shared_ptr<ChessbotAction> Ptr;
  typedef boost::shared_ptr<ChessbotAction const> ConstPtr;

  typedef chessbot::ChessbotActionGoal _action_goal_type;
  typedef chessbot::ChessbotActionResult _action_result_type;
  typedef chessbot::ChessbotActionFeedback _action_feedback_type;

  chessbot::ChessbotActionGoal action_goal;
  chessbot::ChessbotActionResult action_result;
  chessbot::ChessbotActionFeedback action_feedback;

  ChessbotAction() : ros::Message()
  {
  }
  ChessbotAction(const ChessbotAction &copy) : ros::Message(),
    action_goal(copy.action_goal),
    action_result(copy.action_result),
    action_feedback(copy.action_feedback)
  {
    (void)copy;
  }
  ChessbotAction &operator =(const ChessbotAction &copy)
  {
    if (this == &copy)
      return *this;
    action_goal = copy.action_goal;
    action_result = copy.action_result;
    action_feedback = copy.action_feedback;
    return *this;
  }
  virtual ~ChessbotAction() 
  {
  }
  inline static std::string __s_getDataType() { return std::string("chessbot/ChessbotAction"); }
  inline static std::string __s_getMD5Sum() { return std::string("6d13f6edd92757238ecf501b99d7cc86"); }
  inline static std::string __s_getMessageDefinition()
  {
    return std::string(
    "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
    "\n"
    "ChessbotActionGoal action_goal\n"
    "ChessbotActionResult action_result\n"
    "ChessbotActionFeedback action_feedback\n"
    "\n"
    "================================================================================\n"
    "MSG: chessbot/ChessbotActionGoal\n"
    "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
    "\n"
    "Header header\n"
    "actionlib_msgs/GoalID goal_id\n"
    "ChessbotGoal goal\n"
    "\n"
    "================================================================================\n"
    "MSG: roslib/Header\n"
    "# Standard metadata for higher-level stamped data types.\n"
    "# This is generally used to communicate timestamped data \n"
    "# in a particular coordinate frame.\n"
    "# \n"
    "# sequence ID: consecutively increasing ID \n"
    "uint32 seq\n"
    "#Two-integer timestamp that is expressed as:\n"
    "# * stamp.secs: seconds (stamp_secs) since epoch\n"
    "# * stamp.nsecs: nanoseconds since stamp_secs\n"
    "# time-handling sugar is provided by the client library\n"
    "time stamp\n"
    "#Frame this data is associated with\n"
    "# 0: no frame\n"
    "# 1: global frame\n"
    "string frame_id\n"
    "\n"
    "================================================================================\n"
    "MSG: actionlib_msgs/GoalID\n"
    "# The stamp should store the time at which this goal was requested.\n"
    "# It is used by an action server when it tries to preempt all\n"
    "# goals that were requested before a certain time\n"
    "time stamp\n"
    "\n"
    "# The id provides a way to associate feedback and\n"
    "# result message with specific goal requests. The id\n"
    "# specified must be unique.\n"
    "string id\n"
    "\n"
    "\n"
    "================================================================================\n"
    "MSG: chessbot/ChessbotGoal\n"
    "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
    "#goal definition\n"
    "int8 origin_row\n"
    "int8 origin_col\n"
    "int8 destination_row\n"
    "int8 destination_col\n"
    "bool capture\n"
    "\n"
    "\n"
    "================================================================================\n"
    "MSG: chessbot/ChessbotActionResult\n"
    "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
    "\n"
    "Header header\n"
    "actionlib_msgs/GoalStatus status\n"
    "ChessbotResult result\n"
    "\n"
    "================================================================================\n"
    "MSG: actionlib_msgs/GoalStatus\n"
    "GoalID goal_id\n"
    "uint8 status\n"
    "uint8 PENDING         = 0   # The goal has yet to be processed by the action server\n"
    "uint8 ACTIVE          = 1   # The goal is currently being processed by the action server\n"
    "uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n"
    "                            #   and has since completed its execution (Terminal State)\n"
    "uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\n"
    "uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n"
    "                            #    to some failure (Terminal State)\n"
    "uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n"
    "                            #    because the goal was unattainable or invalid (Terminal State)\n"
    "uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n"
    "                            #    and has not yet completed execution\n"
    "uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n"
    "                            #    but the action server has not yet confirmed that the goal is canceled\n"
    "uint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n"
    "                            #    and was successfully cancelled (Terminal State)\n"
    "uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n"
    "                            #    sent over the wire by an action server\n"
    "\n"
    "#Allow for the user to associate a string with GoalStatus for debugging\n"
    "string text\n"
    "\n"
    "\n"
    "================================================================================\n"
    "MSG: chessbot/ChessbotResult\n"
    "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
    "#result definition\n"
    "\n"
    "================================================================================\n"
    "MSG: chessbot/ChessbotActionFeedback\n"
    "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
    "\n"
    "Header header\n"
    "actionlib_msgs/GoalStatus status\n"
    "ChessbotFeedback feedback\n"
    "\n"
    "================================================================================\n"
    "MSG: chessbot/ChessbotFeedback\n"
    "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
    "#feedback definition\n"
    "\n"
    "\n"
    );
  }
  inline virtual const std::string __getDataType() const { return __s_getDataType(); }
  inline virtual const std::string __getMD5Sum() const { return __s_getMD5Sum(); }
  inline virtual const std::string __getMessageDefinition() const { return __s_getMessageDefinition(); }
  inline uint32_t serializationLength() const
  {
    unsigned __l = 0;
    __l += action_goal.serializationLength(); // action_goal
    __l += action_result.serializationLength(); // action_result
    __l += action_feedback.serializationLength(); // action_feedback
    return __l;
  }
  virtual uint8_t *serialize(uint8_t *write_ptr,
#if defined(__GNUC__)
                             __attribute__((unused)) uint32_t seq) const
#else
                             uint32_t seq) const
#endif
  {
    write_ptr = action_goal.serialize(write_ptr, seq);
    write_ptr = action_result.serialize(write_ptr, seq);
    write_ptr = action_feedback.serialize(write_ptr, seq);
    return write_ptr;
  }
  virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    read_ptr = action_goal.deserialize(read_ptr);
    read_ptr = action_result.deserialize(read_ptr);
    read_ptr = action_feedback.deserialize(read_ptr);
    return read_ptr;
  }
};

typedef boost::shared_ptr<ChessbotAction> ChessbotActionPtr;
typedef boost::shared_ptr<ChessbotAction const> ChessbotActionConstPtr;


}

#endif
