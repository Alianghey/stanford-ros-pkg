/* auto-generated by genmsg_cpp from /home/davidmandle/rospackages/chessbot/msg/ChessbotActionResult.msg.  Do not edit! */
#ifndef CHESSBOT_CHESSBOTACTIONRESULT_H
#define CHESSBOT_CHESSBOTACTIONRESULT_H

#include <string>
#include <vector>
#include "ros/message.h"
#include "ros/debug.h"
#include "ros/assert.h"
#include "ros/time.h"

#include "roslib/Header.h"
#include "actionlib_msgs/GoalID.h"
#include "actionlib_msgs/GoalStatus.h"
#include "chessbot/ChessbotResult.h"

namespace chessbot
{

//! \htmlinclude ChessbotActionResult.msg.html

class ChessbotActionResult : public ros::Message
{
public:
  typedef boost::shared_ptr<ChessbotActionResult> Ptr;
  typedef boost::shared_ptr<ChessbotActionResult const> ConstPtr;

  typedef roslib::Header _header_type;
  typedef actionlib_msgs::GoalStatus _status_type;
  typedef chessbot::ChessbotResult _result_type;

  roslib::Header header;
  actionlib_msgs::GoalStatus status;
  chessbot::ChessbotResult result;

  ChessbotActionResult() : ros::Message()
  {
  }
  ChessbotActionResult(const ChessbotActionResult &copy) : ros::Message(),
    header(copy.header),
    status(copy.status),
    result(copy.result)
  {
    (void)copy;
  }
  ChessbotActionResult &operator =(const ChessbotActionResult &copy)
  {
    if (this == &copy)
      return *this;
    header = copy.header;
    status = copy.status;
    result = copy.result;
    return *this;
  }
  virtual ~ChessbotActionResult() 
  {
  }
  inline static std::string __s_getDataType() { return std::string("chessbot/ChessbotActionResult"); }
  inline static std::string __s_getMD5Sum() { return std::string("1eb06eeff08fa7ea874431638cb52332"); }
  inline static std::string __s_getMessageDefinition()
  {
    return std::string(
    "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
    "\n"
    "Header header\n"
    "actionlib_msgs/GoalStatus status\n"
    "ChessbotResult result\n"
    "\n"
    "================================================================================\n"
    "MSG: roslib/Header\n"
    "# Standard metadata for higher-level stamped data types.\n"
    "# This is generally used to communicate timestamped data \n"
    "# in a particular coordinate frame.\n"
    "# \n"
    "# sequence ID: consecutively increasing ID \n"
    "uint32 seq\n"
    "#Two-integer timestamp that is expressed as:\n"
    "# * stamp.secs: seconds (stamp_secs) since epoch\n"
    "# * stamp.nsecs: nanoseconds since stamp_secs\n"
    "# time-handling sugar is provided by the client library\n"
    "time stamp\n"
    "#Frame this data is associated with\n"
    "# 0: no frame\n"
    "# 1: global frame\n"
    "string frame_id\n"
    "\n"
    "================================================================================\n"
    "MSG: actionlib_msgs/GoalStatus\n"
    "GoalID goal_id\n"
    "uint8 status\n"
    "uint8 PENDING         = 0   # The goal has yet to be processed by the action server\n"
    "uint8 ACTIVE          = 1   # The goal is currently being processed by the action server\n"
    "uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n"
    "                            #   and has since completed its execution (Terminal State)\n"
    "uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\n"
    "uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n"
    "                            #    to some failure (Terminal State)\n"
    "uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n"
    "                            #    because the goal was unattainable or invalid (Terminal State)\n"
    "uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n"
    "                            #    and has not yet completed execution\n"
    "uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n"
    "                            #    but the action server has not yet confirmed that the goal is canceled\n"
    "uint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n"
    "                            #    and was successfully cancelled (Terminal State)\n"
    "uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n"
    "                            #    sent over the wire by an action server\n"
    "\n"
    "#Allow for the user to associate a string with GoalStatus for debugging\n"
    "string text\n"
    "\n"
    "\n"
    "================================================================================\n"
    "MSG: actionlib_msgs/GoalID\n"
    "# The stamp should store the time at which this goal was requested.\n"
    "# It is used by an action server when it tries to preempt all\n"
    "# goals that were requested before a certain time\n"
    "time stamp\n"
    "\n"
    "# The id provides a way to associate feedback and\n"
    "# result message with specific goal requests. The id\n"
    "# specified must be unique.\n"
    "string id\n"
    "\n"
    "\n"
    "================================================================================\n"
    "MSG: chessbot/ChessbotResult\n"
    "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
    "#result definition\n"
    "\n"
    "\n"
    );
  }
  inline virtual const std::string __getDataType() const { return __s_getDataType(); }
  inline virtual const std::string __getMD5Sum() const { return __s_getMD5Sum(); }
  inline virtual const std::string __getMessageDefinition() const { return __s_getMessageDefinition(); }
  inline uint32_t serializationLength() const
  {
    unsigned __l = 0;
    __l += header.serializationLength(); // header
    __l += status.serializationLength(); // status
    __l += result.serializationLength(); // result
    return __l;
  }
  virtual uint8_t *serialize(uint8_t *write_ptr,
                             uint32_t seq) const
  {
    roslib::Header _ser_header = header;
    bool __reset_seq = (header.seq == 0);
    if (__reset_seq) _ser_header.seq = seq;
    write_ptr = _ser_header.serialize(write_ptr, seq);
    write_ptr = status.serialize(write_ptr, seq);
    write_ptr = result.serialize(write_ptr, seq);
    return write_ptr;
  }
  virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    read_ptr = header.deserialize(read_ptr);
    read_ptr = status.deserialize(read_ptr);
    read_ptr = result.deserialize(read_ptr);
    return read_ptr;
  }
};

typedef boost::shared_ptr<ChessbotActionResult> ChessbotActionResultPtr;
typedef boost::shared_ptr<ChessbotActionResult const> ChessbotActionResultConstPtr;


}

#endif
