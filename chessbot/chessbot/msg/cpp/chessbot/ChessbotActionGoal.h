/* auto-generated by genmsg_cpp from /home/davidmandle/rospackages/chessbot/msg/ChessbotActionGoal.msg.  Do not edit! */
#ifndef CHESSBOT_CHESSBOTACTIONGOAL_H
#define CHESSBOT_CHESSBOTACTIONGOAL_H

#include <string>
#include <vector>
#include "ros/message.h"
#include "ros/debug.h"
#include "ros/assert.h"
#include "ros/time.h"

#include "roslib/Header.h"
#include "actionlib_msgs/GoalID.h"
#include "chessbot/ChessbotGoal.h"

namespace chessbot
{

//! \htmlinclude ChessbotActionGoal.msg.html

class ChessbotActionGoal : public ros::Message
{
public:
  typedef boost::shared_ptr<ChessbotActionGoal> Ptr;
  typedef boost::shared_ptr<ChessbotActionGoal const> ConstPtr;

  typedef roslib::Header _header_type;
  typedef actionlib_msgs::GoalID _goal_id_type;
  typedef chessbot::ChessbotGoal _goal_type;

  roslib::Header header;
  actionlib_msgs::GoalID goal_id;
  chessbot::ChessbotGoal goal;

  ChessbotActionGoal() : ros::Message()
  {
  }
  ChessbotActionGoal(const ChessbotActionGoal &copy) : ros::Message(),
    header(copy.header),
    goal_id(copy.goal_id),
    goal(copy.goal)
  {
    (void)copy;
  }
  ChessbotActionGoal &operator =(const ChessbotActionGoal &copy)
  {
    if (this == &copy)
      return *this;
    header = copy.header;
    goal_id = copy.goal_id;
    goal = copy.goal;
    return *this;
  }
  virtual ~ChessbotActionGoal() 
  {
  }
  inline static std::string __s_getDataType() { return std::string("chessbot/ChessbotActionGoal"); }
  inline static std::string __s_getMD5Sum() { return std::string("c4c14d53c458c0d2f6e76127d09c67a8"); }
  inline static std::string __s_getMessageDefinition()
  {
    return std::string(
    "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
    "\n"
    "Header header\n"
    "actionlib_msgs/GoalID goal_id\n"
    "ChessbotGoal goal\n"
    "\n"
    "================================================================================\n"
    "MSG: roslib/Header\n"
    "# Standard metadata for higher-level stamped data types.\n"
    "# This is generally used to communicate timestamped data \n"
    "# in a particular coordinate frame.\n"
    "# \n"
    "# sequence ID: consecutively increasing ID \n"
    "uint32 seq\n"
    "#Two-integer timestamp that is expressed as:\n"
    "# * stamp.secs: seconds (stamp_secs) since epoch\n"
    "# * stamp.nsecs: nanoseconds since stamp_secs\n"
    "# time-handling sugar is provided by the client library\n"
    "time stamp\n"
    "#Frame this data is associated with\n"
    "# 0: no frame\n"
    "# 1: global frame\n"
    "string frame_id\n"
    "\n"
    "================================================================================\n"
    "MSG: actionlib_msgs/GoalID\n"
    "# The stamp should store the time at which this goal was requested.\n"
    "# It is used by an action server when it tries to preempt all\n"
    "# goals that were requested before a certain time\n"
    "time stamp\n"
    "\n"
    "# The id provides a way to associate feedback and\n"
    "# result message with specific goal requests. The id\n"
    "# specified must be unique.\n"
    "string id\n"
    "\n"
    "\n"
    "================================================================================\n"
    "MSG: chessbot/ChessbotGoal\n"
    "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
    "#goal definition\n"
    "int8 origin_row\n"
    "int8 origin_col\n"
    "int8 destination_row\n"
    "int8 destination_col\n"
    "bool capture\n"
    "\n"
    "\n"
    "\n"
    );
  }
  inline virtual const std::string __getDataType() const { return __s_getDataType(); }
  inline virtual const std::string __getMD5Sum() const { return __s_getMD5Sum(); }
  inline virtual const std::string __getMessageDefinition() const { return __s_getMessageDefinition(); }
  inline uint32_t serializationLength() const
  {
    unsigned __l = 0;
    __l += header.serializationLength(); // header
    __l += goal_id.serializationLength(); // goal_id
    __l += goal.serializationLength(); // goal
    return __l;
  }
  virtual uint8_t *serialize(uint8_t *write_ptr,
                             uint32_t seq) const
  {
    roslib::Header _ser_header = header;
    bool __reset_seq = (header.seq == 0);
    if (__reset_seq) _ser_header.seq = seq;
    write_ptr = _ser_header.serialize(write_ptr, seq);
    write_ptr = goal_id.serialize(write_ptr, seq);
    write_ptr = goal.serialize(write_ptr, seq);
    return write_ptr;
  }
  virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    read_ptr = header.deserialize(read_ptr);
    read_ptr = goal_id.deserialize(read_ptr);
    read_ptr = goal.deserialize(read_ptr);
    return read_ptr;
  }
};

typedef boost::shared_ptr<ChessbotActionGoal> ChessbotActionGoalPtr;
typedef boost::shared_ptr<ChessbotActionGoal const> ChessbotActionGoalConstPtr;


}

#endif
