"""autogenerated by genmsg_py from WifiScan.msg. Do not edit."""
import roslib.message
import struct

import wifi_sniffer.msg
import roslib.rostime

class WifiScan(roslib.message.Message):
  _md5sum = "cd49c33ac395216be18f78b619e234bd"
  _type = "wifi_sniffer/WifiScan"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """time t
WifiSniff[] sniffs

================================================================================
MSG: wifi_sniffer/WifiSniff
time t
string mac
string ssid
int32 signal_level
int32 signal_noise

"""
  __slots__ = ['t','sniffs']
  _slot_types = ['time','wifi_sniffer/WifiSniff[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       t,sniffs
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(WifiScan, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.t is None:
        self.t = roslib.rostime.Time()
      if self.sniffs is None:
        self.sniffs = []
    else:
      self.t = roslib.rostime.Time()
      self.sniffs = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_2I.pack(_x.t.secs, _x.t.nsecs))
      length = len(self.sniffs)
      buff.write(_struct_I.pack(length))
      for val1 in self.sniffs:
        _v1 = val1.t
        _x = _v1
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = val1.mac
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.ssid
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_2i.pack(_x.signal_level, _x.signal_noise))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.t is None:
        self.t = roslib.rostime.Time()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.t.secs, _x.t.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sniffs = []
      for i in xrange(0, length):
        val1 = wifi_sniffer.msg.WifiSniff()
        _v2 = val1.t
        _x = _v2
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.mac = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.ssid = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.signal_level, _x.signal_noise,) = _struct_2i.unpack(str[start:end])
        self.sniffs.append(val1)
      self.t.canon()
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_2I.pack(_x.t.secs, _x.t.nsecs))
      length = len(self.sniffs)
      buff.write(_struct_I.pack(length))
      for val1 in self.sniffs:
        _v3 = val1.t
        _x = _v3
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = val1.mac
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.ssid
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_2i.pack(_x.signal_level, _x.signal_noise))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.t is None:
        self.t = roslib.rostime.Time()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.t.secs, _x.t.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sniffs = []
      for i in xrange(0, length):
        val1 = wifi_sniffer.msg.WifiSniff()
        _v4 = val1.t
        _x = _v4
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.mac = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.ssid = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.signal_level, _x.signal_noise,) = _struct_2i.unpack(str[start:end])
        self.sniffs.append(val1)
      self.t.canon()
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_2I = struct.Struct("<2I")
_struct_2i = struct.Struct("<2i")
