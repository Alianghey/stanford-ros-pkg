/* Auto-generated by genmsg_cpp for file /home/brian/cs225b/stanford-ros-pkg/low_cost_localization/wifi_sniffer/msg/WifiScan.msg */
#ifndef WIFI_SNIFFER_MESSAGE_WIFISCAN_H
#define WIFI_SNIFFER_MESSAGE_WIFISCAN_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "wifi_sniffer/WifiSniff.h"

namespace wifi_sniffer
{
template <class ContainerAllocator>
struct WifiScan_ : public ros::Message
{
  typedef WifiScan_<ContainerAllocator> Type;

  WifiScan_()
  : t()
  , sniffs()
  {
  }

  WifiScan_(const ContainerAllocator& _alloc)
  : t()
  , sniffs(_alloc)
  {
  }

  typedef ros::Time _t_type;
  ros::Time t;

  typedef std::vector< ::wifi_sniffer::WifiSniff_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::wifi_sniffer::WifiSniff_<ContainerAllocator> >::other >  _sniffs_type;
  std::vector< ::wifi_sniffer::WifiSniff_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::wifi_sniffer::WifiSniff_<ContainerAllocator> >::other >  sniffs;


  ROSCPP_DEPRECATED uint32_t get_sniffs_size() const { return (uint32_t)sniffs.size(); }
  ROSCPP_DEPRECATED void set_sniffs_size(uint32_t size) { sniffs.resize((size_t)size); }
  ROSCPP_DEPRECATED void get_sniffs_vec(std::vector< ::wifi_sniffer::WifiSniff_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::wifi_sniffer::WifiSniff_<ContainerAllocator> >::other > & vec) const { vec = this->sniffs; }
  ROSCPP_DEPRECATED void set_sniffs_vec(const std::vector< ::wifi_sniffer::WifiSniff_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::wifi_sniffer::WifiSniff_<ContainerAllocator> >::other > & vec) { this->sniffs = vec; }
private:
  static const char* __s_getDataType_() { return "wifi_sniffer/WifiScan"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "cd49c33ac395216be18f78b619e234bd"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "time t\n\
WifiSniff[] sniffs\n\
\n\
================================================================================\n\
MSG: wifi_sniffer/WifiSniff\n\
time t\n\
string mac\n\
string ssid\n\
int32 signal_level\n\
int32 signal_noise\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, t);
    ros::serialization::serialize(stream, sniffs);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, t);
    ros::serialization::deserialize(stream, sniffs);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(t);
    size += ros::serialization::serializationLength(sniffs);
    return size;
  }

  typedef boost::shared_ptr< ::wifi_sniffer::WifiScan_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wifi_sniffer::WifiScan_<ContainerAllocator>  const> ConstPtr;
}; // struct WifiScan
typedef  ::wifi_sniffer::WifiScan_<std::allocator<void> > WifiScan;

typedef boost::shared_ptr< ::wifi_sniffer::WifiScan> WifiScanPtr;
typedef boost::shared_ptr< ::wifi_sniffer::WifiScan const> WifiScanConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::wifi_sniffer::WifiScan_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::wifi_sniffer::WifiScan_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace wifi_sniffer

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::wifi_sniffer::WifiScan_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cd49c33ac395216be18f78b619e234bd";
  }

  static const char* value(const  ::wifi_sniffer::WifiScan_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xcd49c33ac395216bULL;
  static const uint64_t static_value2 = 0xe18f78b619e234bdULL;
};

template<class ContainerAllocator>
struct DataType< ::wifi_sniffer::WifiScan_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wifi_sniffer/WifiScan";
  }

  static const char* value(const  ::wifi_sniffer::WifiScan_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::wifi_sniffer::WifiScan_<ContainerAllocator> > {
  static const char* value() 
  {
    return "time t\n\
WifiSniff[] sniffs\n\
\n\
================================================================================\n\
MSG: wifi_sniffer/WifiSniff\n\
time t\n\
string mac\n\
string ssid\n\
int32 signal_level\n\
int32 signal_noise\n\
\n\
";
  }

  static const char* value(const  ::wifi_sniffer::WifiScan_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::wifi_sniffer::WifiScan_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.t);
    stream.next(m.sniffs);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct WifiScan_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wifi_sniffer::WifiScan_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::wifi_sniffer::WifiScan_<ContainerAllocator> & v) 
  {
    s << indent << "t: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.t);
    s << indent << "sniffs[]" << std::endl;
    for (size_t i = 0; i < v.sniffs.size(); ++i)
    {
      s << indent << "  sniffs[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::wifi_sniffer::WifiSniff_<ContainerAllocator> >::stream(s, indent + "    ", v.sniffs[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // WIFI_SNIFFER_MESSAGE_WIFISCAN_H

