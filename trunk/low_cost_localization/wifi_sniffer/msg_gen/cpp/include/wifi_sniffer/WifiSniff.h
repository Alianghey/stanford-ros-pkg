/* Auto-generated by genmsg_cpp for file /home/brian/cs225b/stanford-ros-pkg/low_cost_localization/wifi_sniffer/msg/WifiSniff.msg */
#ifndef WIFI_SNIFFER_MESSAGE_WIFISNIFF_H
#define WIFI_SNIFFER_MESSAGE_WIFISNIFF_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace wifi_sniffer
{
template <class ContainerAllocator>
struct WifiSniff_ : public ros::Message
{
  typedef WifiSniff_<ContainerAllocator> Type;

  WifiSniff_()
  : t()
  , mac()
  , ssid()
  , signal_level(0)
  , signal_noise(0)
  {
  }

  WifiSniff_(const ContainerAllocator& _alloc)
  : t()
  , mac(_alloc)
  , ssid(_alloc)
  , signal_level(0)
  , signal_noise(0)
  {
  }

  typedef ros::Time _t_type;
  ros::Time t;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mac_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  mac;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ssid_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  ssid;

  typedef int32_t _signal_level_type;
  int32_t signal_level;

  typedef int32_t _signal_noise_type;
  int32_t signal_noise;


private:
  static const char* __s_getDataType_() { return "wifi_sniffer/WifiSniff"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "3bed52c7a8a1d7cc0444e57a935d953a"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "time t\n\
string mac\n\
string ssid\n\
int32 signal_level\n\
int32 signal_noise\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, t);
    ros::serialization::serialize(stream, mac);
    ros::serialization::serialize(stream, ssid);
    ros::serialization::serialize(stream, signal_level);
    ros::serialization::serialize(stream, signal_noise);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, t);
    ros::serialization::deserialize(stream, mac);
    ros::serialization::deserialize(stream, ssid);
    ros::serialization::deserialize(stream, signal_level);
    ros::serialization::deserialize(stream, signal_noise);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(t);
    size += ros::serialization::serializationLength(mac);
    size += ros::serialization::serializationLength(ssid);
    size += ros::serialization::serializationLength(signal_level);
    size += ros::serialization::serializationLength(signal_noise);
    return size;
  }

  typedef boost::shared_ptr< ::wifi_sniffer::WifiSniff_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wifi_sniffer::WifiSniff_<ContainerAllocator>  const> ConstPtr;
}; // struct WifiSniff
typedef  ::wifi_sniffer::WifiSniff_<std::allocator<void> > WifiSniff;

typedef boost::shared_ptr< ::wifi_sniffer::WifiSniff> WifiSniffPtr;
typedef boost::shared_ptr< ::wifi_sniffer::WifiSniff const> WifiSniffConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::wifi_sniffer::WifiSniff_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::wifi_sniffer::WifiSniff_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace wifi_sniffer

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::wifi_sniffer::WifiSniff_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3bed52c7a8a1d7cc0444e57a935d953a";
  }

  static const char* value(const  ::wifi_sniffer::WifiSniff_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3bed52c7a8a1d7ccULL;
  static const uint64_t static_value2 = 0x0444e57a935d953aULL;
};

template<class ContainerAllocator>
struct DataType< ::wifi_sniffer::WifiSniff_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wifi_sniffer/WifiSniff";
  }

  static const char* value(const  ::wifi_sniffer::WifiSniff_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::wifi_sniffer::WifiSniff_<ContainerAllocator> > {
  static const char* value() 
  {
    return "time t\n\
string mac\n\
string ssid\n\
int32 signal_level\n\
int32 signal_noise\n\
\n\
";
  }

  static const char* value(const  ::wifi_sniffer::WifiSniff_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::wifi_sniffer::WifiSniff_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.t);
    stream.next(m.mac);
    stream.next(m.ssid);
    stream.next(m.signal_level);
    stream.next(m.signal_noise);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct WifiSniff_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wifi_sniffer::WifiSniff_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::wifi_sniffer::WifiSniff_<ContainerAllocator> & v) 
  {
    s << indent << "t: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.t);
    s << indent << "mac: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mac);
    s << indent << "ssid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ssid);
    s << indent << "signal_level: ";
    Printer<int32_t>::stream(s, indent + "  ", v.signal_level);
    s << indent << "signal_noise: ";
    Printer<int32_t>::stream(s, indent + "  ", v.signal_noise);
  }
};


} // namespace message_operations
} // namespace ros

#endif // WIFI_SNIFFER_MESSAGE_WIFISNIFF_H

