# autogenerated by genmsg_py from CartesianMoveRightArmGoal.msg. Do not edit.
import roslib.message
import struct

import geometry_msgs.msg
import roslib.msg

class CartesianMoveRightArmGoal(roslib.message.Message):
  _md5sum = "7233d915b08b33dfe82d846f84b047b7"
  _type = "cart_interp/CartesianMoveRightArmGoal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# goal definition
geometry_msgs/PoseStamped setpoint

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: roslib/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['setpoint']
  _slot_types = ['geometry_msgs/PoseStamped']

  ## Constructor. Any message fields that are implicitly/explicitly
  ## set to None will be assigned a default value. The recommend
  ## use is keyword arguments as this is more robust to future message
  ## changes.  You cannot mix in-order arguments and keyword arguments.
  ##
  ## The available fields are:
  ##   setpoint
  ##
  ## @param self: self
  ## @param args: complete set of field values, in .msg order
  ## @param kwds: use keyword arguments corresponding to message field names
  ## to set specific fields. 
  def __init__(self, *args, **kwds):
    if args or kwds:
      super(CartesianMoveRightArmGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.setpoint is None:
        self.setpoint = geometry_msgs.msg.PoseStamped()
    else:
      self.setpoint = geometry_msgs.msg.PoseStamped()

  ## internal API method
  def _get_types(self): return self._slot_types

  ## serialize message into buffer
  ## @param buff StringIO: buffer
  def serialize(self, buff):
    try:
      buff.write(struct.pack('<3I', self.setpoint.header.seq, self.setpoint.header.stamp.secs, self.setpoint.header.stamp.nsecs))
      length = len(self.setpoint.header.frame_id)
      #serialize self.setpoint.header.frame_id
      buff.write(struct.pack('<I%ss'%length, length, self.setpoint.header.frame_id))
      buff.write(struct.pack('<7d', self.setpoint.pose.position.x, self.setpoint.pose.position.y, self.setpoint.pose.position.z, self.setpoint.pose.orientation.x, self.setpoint.pose.orientation.y, self.setpoint.pose.orientation.z, self.setpoint.pose.orientation.w))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance
  ## @param self: self
  ## @param str str: byte array of serialized message
  def deserialize(self, str):
    try:
      if self.setpoint is None:
        self.setpoint = geometry_msgs.msg.PoseStamped()
      end = 0
      start = end
      end += 12
      (self.setpoint.header.seq, self.setpoint.header.stamp.secs, self.setpoint.header.stamp.nsecs,) = struct.unpack('<3I',str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.setpoint.header.frame_id
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.setpoint.header.frame_id,) = struct.unpack(pattern, str[start:end])
      start = end
      end += 56
      (self.setpoint.pose.position.x, self.setpoint.pose.position.y, self.setpoint.pose.position.z, self.setpoint.pose.orientation.x, self.setpoint.pose.orientation.y, self.setpoint.pose.orientation.z, self.setpoint.pose.orientation.w,) = struct.unpack('<7d',str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  ## serialize message with numpy array types into buffer
  ## @param self: self
  ## @param buff StringIO: buffer
  ## @param numpy module: numpy python module
  def serialize_numpy(self, buff, numpy):
    try:
      buff.write(struct.pack('<3I', self.setpoint.header.seq, self.setpoint.header.stamp.secs, self.setpoint.header.stamp.nsecs))
      length = len(self.setpoint.header.frame_id)
      #serialize self.setpoint.header.frame_id
      buff.write(struct.pack('<I%ss'%length, length, self.setpoint.header.frame_id))
      buff.write(struct.pack('<7d', self.setpoint.pose.position.x, self.setpoint.pose.position.y, self.setpoint.pose.position.z, self.setpoint.pose.orientation.x, self.setpoint.pose.orientation.y, self.setpoint.pose.orientation.z, self.setpoint.pose.orientation.w))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance using numpy for array types
  ## @param self: self
  ## @param str str: byte array of serialized message
  ## @param numpy module: numpy python module
  def deserialize_numpy(self, str, numpy):
    try:
      if self.setpoint is None:
        self.setpoint = geometry_msgs.msg.PoseStamped()
      end = 0
      start = end
      end += 12
      (self.setpoint.header.seq, self.setpoint.header.stamp.secs, self.setpoint.header.stamp.nsecs,) = struct.unpack('<3I',str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.setpoint.header.frame_id
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.setpoint.header.frame_id,) = struct.unpack(pattern, str[start:end])
      start = end
      end += 56
      (self.setpoint.pose.position.x, self.setpoint.pose.position.y, self.setpoint.pose.position.z, self.setpoint.pose.orientation.x, self.setpoint.pose.orientation.y, self.setpoint.pose.orientation.z, self.setpoint.pose.orientation.w,) = struct.unpack('<7d',str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

