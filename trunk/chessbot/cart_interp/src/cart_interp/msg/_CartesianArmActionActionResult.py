# autogenerated by genmsg_py from CartesianArmActionActionResult.msg. Do not edit.
import roslib.message
import struct

import geometry_msgs.msg
import roslib.rostime
import cart_interp.msg
import roslib.msg
import actionlib_msgs.msg

class CartesianArmActionActionResult(roslib.message.Message):
  _md5sum = "8796c700a48eebab32515e1356179491"
  _type = "cart_interp/CartesianArmActionActionResult"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
CartesianArmActionResult result

================================================================================
MSG: roslib/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: cart_interp/CartesianArmActionResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# result definition
geometry_msgs/Pose endpoint

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['header','status','result']
  _slot_types = ['Header','actionlib_msgs/GoalStatus','cart_interp/CartesianArmActionResult']

  ## Constructor. Any message fields that are implicitly/explicitly
  ## set to None will be assigned a default value. The recommend
  ## use is keyword arguments as this is more robust to future message
  ## changes.  You cannot mix in-order arguments and keyword arguments.
  ##
  ## The available fields are:
  ##   header,status,result
  ##
  ## @param self: self
  ## @param args: complete set of field values, in .msg order
  ## @param kwds: use keyword arguments corresponding to message field names
  ## to set specific fields. 
  def __init__(self, *args, **kwds):
    if args or kwds:
      super(CartesianArmActionActionResult, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = roslib.msg._Header.Header()
      if self.status is None:
        self.status = actionlib_msgs.msg.GoalStatus()
      if self.result is None:
        self.result = cart_interp.msg.CartesianArmActionResult()
    else:
      self.header = roslib.msg._Header.Header()
      self.status = actionlib_msgs.msg.GoalStatus()
      self.result = cart_interp.msg.CartesianArmActionResult()

  ## internal API method
  def _get_types(self): return self._slot_types

  ## serialize message into buffer
  ## @param buff StringIO: buffer
  def serialize(self, buff):
    try:
      buff.write(struct.pack('<3I', self.header.seq, self.header.stamp.secs, self.header.stamp.nsecs))
      length = len(self.header.frame_id)
      #serialize self.header.frame_id
      buff.write(struct.pack('<I%ss'%length, length, self.header.frame_id))
      buff.write(struct.pack('<2I', self.status.goal_id.stamp.secs, self.status.goal_id.stamp.nsecs))
      length = len(self.status.goal_id.id)
      #serialize self.status.goal_id.id
      buff.write(struct.pack('<I%ss'%length, length, self.status.goal_id.id))
      buff.write(struct.pack('<B', self.status.status))
      length = len(self.status.text)
      #serialize self.status.text
      buff.write(struct.pack('<I%ss'%length, length, self.status.text))
      buff.write(struct.pack('<7d', self.result.endpoint.position.x, self.result.endpoint.position.y, self.result.endpoint.position.z, self.result.endpoint.orientation.x, self.result.endpoint.orientation.y, self.result.endpoint.orientation.z, self.result.endpoint.orientation.w))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance
  ## @param self: self
  ## @param str str: byte array of serialized message
  def deserialize(self, str):
    try:
      if self.header is None:
        self.header = roslib.msg._Header.Header()
      if self.status is None:
        self.status = actionlib_msgs.msg.GoalStatus()
      if self.result is None:
        self.result = cart_interp.msg.CartesianArmActionResult()
      end = 0
      start = end
      end += 12
      (self.header.seq, self.header.stamp.secs, self.header.stamp.nsecs,) = struct.unpack('<3I',str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.header.frame_id
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.header.frame_id,) = struct.unpack(pattern, str[start:end])
      start = end
      end += 8
      (self.status.goal_id.stamp.secs, self.status.goal_id.stamp.nsecs,) = struct.unpack('<2I',str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.status.goal_id.id
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.status.goal_id.id,) = struct.unpack(pattern, str[start:end])
      start = end
      end += 1
      (self.status.status,) = struct.unpack('<B',str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.status.text
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.status.text,) = struct.unpack(pattern, str[start:end])
      start = end
      end += 56
      (self.result.endpoint.position.x, self.result.endpoint.position.y, self.result.endpoint.position.z, self.result.endpoint.orientation.x, self.result.endpoint.orientation.y, self.result.endpoint.orientation.z, self.result.endpoint.orientation.w,) = struct.unpack('<7d',str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  ## serialize message with numpy array types into buffer
  ## @param self: self
  ## @param buff StringIO: buffer
  ## @param numpy module: numpy python module
  def serialize_numpy(self, buff, numpy):
    try:
      buff.write(struct.pack('<3I', self.header.seq, self.header.stamp.secs, self.header.stamp.nsecs))
      length = len(self.header.frame_id)
      #serialize self.header.frame_id
      buff.write(struct.pack('<I%ss'%length, length, self.header.frame_id))
      buff.write(struct.pack('<2I', self.status.goal_id.stamp.secs, self.status.goal_id.stamp.nsecs))
      length = len(self.status.goal_id.id)
      #serialize self.status.goal_id.id
      buff.write(struct.pack('<I%ss'%length, length, self.status.goal_id.id))
      buff.write(struct.pack('<B', self.status.status))
      length = len(self.status.text)
      #serialize self.status.text
      buff.write(struct.pack('<I%ss'%length, length, self.status.text))
      buff.write(struct.pack('<7d', self.result.endpoint.position.x, self.result.endpoint.position.y, self.result.endpoint.position.z, self.result.endpoint.orientation.x, self.result.endpoint.orientation.y, self.result.endpoint.orientation.z, self.result.endpoint.orientation.w))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance using numpy for array types
  ## @param self: self
  ## @param str str: byte array of serialized message
  ## @param numpy module: numpy python module
  def deserialize_numpy(self, str, numpy):
    try:
      if self.header is None:
        self.header = roslib.msg._Header.Header()
      if self.status is None:
        self.status = actionlib_msgs.msg.GoalStatus()
      if self.result is None:
        self.result = cart_interp.msg.CartesianArmActionResult()
      end = 0
      start = end
      end += 12
      (self.header.seq, self.header.stamp.secs, self.header.stamp.nsecs,) = struct.unpack('<3I',str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.header.frame_id
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.header.frame_id,) = struct.unpack(pattern, str[start:end])
      start = end
      end += 8
      (self.status.goal_id.stamp.secs, self.status.goal_id.stamp.nsecs,) = struct.unpack('<2I',str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.status.goal_id.id
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.status.goal_id.id,) = struct.unpack(pattern, str[start:end])
      start = end
      end += 1
      (self.status.status,) = struct.unpack('<B',str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.status.text
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.status.text,) = struct.unpack(pattern, str[start:end])
      start = end
      end += 56
      (self.result.endpoint.position.x, self.result.endpoint.position.y, self.result.endpoint.position.z, self.result.endpoint.orientation.x, self.result.endpoint.orientation.y, self.result.endpoint.orientation.z, self.result.endpoint.orientation.w,) = struct.unpack('<7d',str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

